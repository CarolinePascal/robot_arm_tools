load "msh3"
load "tetgen"
load "medit"
load "mmg"
include "MeshSurface.idp"

func meshS meshSphere(real radius, real resolution)
{
    // Mesh 2D
    mesh Th = square(10, 20, [x*pi-pi/2, 2*y*pi]); // ]-pi/2, pi/2[X]0, 2pi[

    // A parametrization of a sphere
    func f1 = radius*cos(x)*cos(y);
    func f2 = radius*cos(x)*sin(y);
    func f3 = radius*sin(x);
    // Partial derivative of the parametrization DF
    func f1x = radius*sin(x)*cos(y);
    func f1y = radius*-cos(x)*sin(y);
    func f2x = radius*-sin(x)*sin(y);
    func f2y = radius*cos(x)*cos(y);
    func f3x = radius*cos(x);
    func f3y = 0;
    //M = DF^t DF
    func m11 = f1x^2 + f2x^2 + f3x^2;
    func m21 = f1x*f1y + f2x*f2y + f3x*f3y;
    func m22 = f1y^2 + f2y^2 + f3y^2;

    // Periodic condition
    func perio = [[4, y], [2, y], [1, x], [3, x]];

    // Mesh adaptation
    real vv = 1/(resolution*resolution);
    Th = adaptmesh(Th, m11*vv, m21*vv, m22*vv, IsMetric=1, periodic=perio);
    Th = adaptmesh(Th, m11*vv, m21*vv, m22*vv, IsMetric=1, periodic=perio);
    Th = adaptmesh(Th, m11*vv, m21*vv, m22*vv, IsMetric=1, periodic=perio);
    Th = adaptmesh(Th, m11*vv, m21*vv, m22*vv, IsMetric=1, periodic=perio);

    // Sphere
    meshS Th3 = movemesh23(Th, transfo=[f1, f2, f3]);

    if(radius/resolution >= 25)
    {
        Th3 = mmgs(Th3,hmin=resolution,hmax=resolution,hgrad=2.0);
    }

    return(Th3);
}