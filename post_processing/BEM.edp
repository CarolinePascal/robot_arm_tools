//ff-mpirun -np 1 BEM.edp -wg

// for the make check:
// NBPROC 4
// PARAM

load "bem"
load "msh3"
include "SphericMeshTools.edp"
include "ComputationTools.edp"

//Define boundary conditions - Infinitesimal acoustic dipole => dirichlet condition

real frequency, k, omega;
real resolution, radius = 1.0;

real[int] Frequencies = [5000,10000]; //UNCOMMENT
real[int] Resolutions = [7.5,8,8.5,9,9.5,10];  //UNCOMMENT

//real[int] Frequencies = [1000];
//real[int] Resolutions = [radius*4*Frequencies[0]/c];

for(int i = 0; i < Frequencies.n; i++)
{
    //Frequency parameters
    frequency = Frequencies[i];
    k = 2*pi*frequency/c;
    omega = c*k;

    //Acoustic field functions
    func G = exp(-1i*k*r)/(4*pi*r);

    //Infinitesimal formulation
    func dipolePressure = (-dipoleMomentum*rho*c*k*k)*sin(theta)*cos(phi)*G*(1 + 1/(1i*k*r));

    for(int j = 0; j < Resolutions.n; j++)
    {
        //Define mesh
        resolution = radius/Resolutions[j];
        meshS ThS = meshSphere(radius, resolution);
        ThS = OrientNormal(ThS,unbounded=1);

        //Define variational problem
        BemKernel ker("SL",k=k);
        varf vbem(u,v) = int2dx2d(ThS)(ThS)(BEM(ker,u,v)) ;  

        //Assemble the H-Matrix
        fespace Uh(ThS,P1);
        HMatrix<complex> H = vbem(Uh,Uh);

        //Solve the linear system
        Uh<complex> p, b;
        varf vrhs(u,v) = int2d(ThS)(dipolePressure*v);
        b[] = vrhs(0,Uh);
        p[] = H^-1*b[];

        //Compute the solution
        BemPotential Pot("SL",k=k);
        varf vpot(u,v) = int2d(ThS)(POT(Pot,u,v));

        //Plot solution
        int cutSize = 100;
        meshS ThOut = meshSphereOrdered(2*radius, cutSize, 2);
        ThOut = trunc(ThOut,(abs(z) < 2*radius*sin(2*pi/cutSize))); //UNCOMMENT
        fespace UhOut(ThOut,P1);

        HMatrix<complex> HP = vpot(Uh,UhOut);
        UhOut<complex> u;
        u[] = HP*p[];

        UhOut<complex> uTh = dipolePressure;

        //medit("Computation",ThOut,abs(u));   //For axis display 
        //medit("Theory",ThOut,abs(dipolePressure));   //For axis display 

        //UNCOMMENT
        //Fill output file
        string outputFilePath = "BEM/output_" + frequency + "_0_" + ThS.nv + ".txt";
        ofstream file(outputFilePath);

        for (int i = 0; i < ThOut.nv; i++)
        {
            if(abs(ThOut(i).z) < 0.01)
            {
                file << ThOut(i).x << ";" << ThOut(i).y << ";" << ThOut(i).z << ";" << real(u[][i]) << ";" << imag(u[][i]) << ";" << real(uTh[][i]) << ";" << imag(uTh[][i]) << endl;
            }
        }
    }
}

