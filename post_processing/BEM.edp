//ff-mpirun -np 4 Helmholtz_circle_Dirichlet.edp -wg

// for the make check:
// NBPROC 4
// PARAM

load "bem"
load "msh3"
include "SphericMeshTools.edp"
include "ComputationTools.edp"

//Define boundary conditions - Infinitesimal acoustic dipole => dirichlet condition
//Frequency parameters
real frequency = 1000;
real k = 2*pi*frequency/c;
real omega = c*k;

//Acoustic field functions
func G = exp(-1i*k*r)/(4*pi*r);

//Infinitesimal formulation
func dipolePressure = (-dipoleMomentum*rho*c*k*k)*sin(theta)*cos(phi)*G*(1 + 1/(1i*k*r));

//Define mesh
real radius = 1;
real resolution = min(radius/2,c/(2*frequency));

meshS ThS = meshSphere(radius, resolution);
ThS = meshSphereOrdered(radius,50,1);
ThS = OrientNormal(ThS,unbounded=1);

//Define variational problem
BemKernel ker("SL",k=k);
varf vbem(u,v) = int2dx2d(ThS)(ThS)(BEM(ker,u,v)) ;  

//Assemble the H-Matrix
fespace Uh(ThS,P1);
HMatrix<complex> H = vbem(Uh,Uh);

//Solve the linear system
Uh<complex> p, b;
varf vrhs(u,v) = int2d(ThS)(dipolePressure*v);
b[] = vrhs(0,Uh);
p[] = H^-1*b[];

//Compute the solution
BemPotential Pot("SL",k=k);
varf vpot(u,v) = int2d(ThS)(POT(Pot,u,v));

//Plot solution
meshS ThOut = meshSphere(radius*2, resolution);

fespace UhOut(ThOut,P1);
HMatrix<complex> HP = vpot(Uh,UhOut);

UhOut<complex> u;
u[] = HP*p[];

//plot(u,wait=1,fill=1);
medit("Result",ThOut,abs(u));   //For axis display ;)