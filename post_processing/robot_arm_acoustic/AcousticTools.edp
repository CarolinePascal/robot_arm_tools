//Experiment parameters
real Tmeas = 20.0; //°C
real Pmeas = 101325.0; //Pa

//Air parameters
real R = 287.0;   //Specific perfect gas constant for air   
real gamma = 1.4;   //Perfect gas heat capacity ratio for air

//Sound parameters
real rhomeas = Pmeas/(R*(273.15+Tmeas));   //kg/m³
real cmeas = sqrt(R*gamma*(273.15+Tmeas));   //m/s

//Reference sound parameters
real Pref = 20e-6; //Pa
real rhoref = 1.204;   //kg/m³ at 20°C
real cref = 343.4;   //m/s at 20°C

//Sound source
real Q = 1; //m³/s
real dipoleMomentum = 1; //m⁴/s

//Frequency parameters
func real kmeas(real frequency){return 2*pi*frequency/cmeas;}
func real kref(real frequency){return 2*pi*frequency/cref;}
func real omega(real frequency){return 2*pi*frequency;}

//Geometrical parameters
real halfDipoleDistance = 0.0; //m -> To be defined as global variable !
func rplus = sqrt(r*r + halfDipoleDistance*halfDipoleDistance - 2*r*halfDipoleDistance*sin(theta)*cos(phi));
func rminus = sqrt(r*r + halfDipoleDistance*halfDipoleDistance + 2*r*halfDipoleDistance*sin(theta)*cos(phi));

//Acoustic field functions
func complex G(real frequency){return exp(1i*kref(frequency)*r)/(4*pi*r);}
func complex Gplus(real frequency){return exp(1i*kref(frequency)*rplus)/(4*pi*rplus);}
func complex Gminus(real frequency){return exp(1i*kref(frequency)*rminus)/(4*pi*rminus);}

//Monopole 
func complex monopolePressure(real frequency){return 1i*omega(frequency)*Q*rhoref*G(frequency);}

func complex dxmonopolePressure(real frequency){return monopolePressure(frequency)*(1i*kref(frequency)*r - 1)*x/(r*r);}
func complex dymonopolePressure(real frequency){return monopolePressure(frequency)*(1i*kref(frequency)*r - 1)*y/(r*r);}
func complex dzmonopolePressure(real frequency){return monopolePressure(frequency)*(1i*kref(frequency)*r - 1)*z/(r*r);}
func complex drmonopolePressure(real frequency){return monopolePressure(frequency)*(1i*kref(frequency)*r - 1)/r;}

//Infinitesimal dipole
func complex infinitesimalDipolePressure(real frequency){return dipoleMomentum*omega(frequency)*rhoref*kref(frequency)*sin(theta)*cos(phi)*G(frequency)*(1 - 1/(1i*kref(frequency)*r));}

//Dipole
func complex dipolePressure(real frequency){return 1i*omega(frequency)*Q*rhoref*(Gplus(frequency) - Gminus(frequency));}

func complex inputFunction(real frequency, string input)
{
    if(input == "monopole")
    {
        return monopolePressure(frequency);
    }
    else if(input == "dipole")
    {
        return dipolePressure(frequency);
    }
    else if(input == "infinitesimalDipole")
    {
        return infinitesimalDipolePressure(frequency);
    }
}

func complex inputFunctionGradient(real frequency, string input)
{
    if(input == "monopole")
    {
        return drmonopolePressure(frequency);
    }
    else
    {
        return 0;
    }
}